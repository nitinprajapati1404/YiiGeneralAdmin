<?php//set_time_limit(0);define('SHORT_OPERATION_TIMEOUT', 8);define('LONG_OPERATION_TIMEOUT', 30);set_time_limit(0);class WebserviceController extends Controller{   /*Add User Service*/  public function actionAddUser()  {    $post = $_REQUEST ;     $email =($post["email"]);    $password =($post["password"]);    $request = "addUser";           /*Validate fields*/      $validate = array("email" => array("require" => 1 ,"msg" => "Email is required."),                       "password" => array("require" => 1 ,"msg" => "Password is required."),      );      $errorMsg = array();      $i=0;      foreach ($post as $key => $value)       {        if(array_key_exists($key,$validate) )        {          $required = $validate[$key]["require"];          $msg =  $validate[$key]["msg"];          if($required == 1)           {            if($value == '')             {              $errorMsg[$i] = $msg ;              $i++;            }          }        }      }      $errorCount = count($errorMsg);      if($errorCount > 0)       {        $res = array("status" => '-4',"error_msg" => $errorMsg) ;        echo Yii::app()->JsonWebservice->response($res);      }      else      {      ?>      	<?php      	$data = array();      	$public_key = 'faceid'; // public key this is passed to api as user identifier		$private_key = 'c1IaqR8Dp7L6sLVbq5b2VlsouTN0ezNAYYnmf0WGb6zbxT7P'; // private key, never pass this!! only used in hashing		foreach($post as $name => $value) 		{			//if(!in_array($name, $ignore)) 			//{				$data['data'][$name] = $value.'<br>';			//}		}		// add timestamp at the end of the data array		$data['data']['timestamp'] = time();		$time = time();		$data['public_key'] = $public_key;		$data['data'] = json_encode($data['data']);		$data['token'] = sha1($data['data'] . $private_key);		/*Insert into user_master */        $connection = Yii::app()->db;        $c = "INSERT INTO `user_master`(`username`,`password`, `timestamp`) VALUES ('".$email."','".$password."','".$time."')";        $dataReader = $connection->createCommand($c)->query();        $Id = Yii::app()->db->getLastInsertId();		if($data) 		{			$ch = curl_init();		    //curl_setopt($ch, CURLOPT_URL, 'http://approvedtrader.directory/api/v1/' . $data['request'] . '/');		    curl_setopt($ch, CURLOPT_URL, 'http://face.id/api/v1/' . $request. '/');		    curl_setopt($ch,CURLOPT_POST, count($data));			curl_setopt($ch,CURLOPT_POSTFIELDS, $data);	 		    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.org/yay.htm');	 		    curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');			    curl_setopt($ch, CURLOPT_HEADER, 0); // Include header in result? (0 = yes, 1 = no)		    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Should cURL return or print out the data? (true = return, false = print)		    curl_setopt($ch, CURLOPT_TIMEOUT, 10); // Timeout in seconds		 		    $output = curl_exec($ch);		    curl_close($ch);  // Close the cURL resource, and free system resources		}		//echo $output;		if($output != '{"id":{}}')		{			$status = '{"response":{"status":"1","msg":"User Added Successfully"}}';            echo $status;            die;		}		else		{			$status = '{"status":"-1"}';            echo $status;            die;		}      }    }     /*Verify Face Service*/  public function actionVerifyFace()  {  	$imagepath = dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . "images" .DIRECTORY_SEPARATOR . "FaceImages" .DIRECTORY_SEPARATOR;    $post = $_REQUEST ;    $image1 = $_REQUEST['image1'];    $image2 = $_REQUEST['image2'];    $image3 = $_REQUEST['image3'];    $image4 = $_REQUEST['image4'];    $image5 = $_REQUEST['image5'];    //$model_id = (isset($_REQUEST['model_id'])) ? $_REQUEST['model_id'] : '1f98e00f-4ba2-42a5-953a-abdc21826892'; // get this from authenticating the user (this is example model id with user id 1)    $model_id = $_REQUEST['model_id'];    $id = (isset($_REQUEST['user_id'])) ? $_REQUEST['user_id'] : 40; // get this from authenticatiing the user    $request = "verifyFace";           /*Validate fields*/      $validate = array("model_id" => array("require" => 1 ,"msg" => "Model Id required."),      );      $errorMsg = array();      $i=0;      foreach ($post as $key => $value)       {        if(array_key_exists($key,$validate) )        {          $required = $validate[$key]["require"];          $msg =  $validate[$key]["msg"];          if($required == 1)           {            if($value == '')             {              $errorMsg[$i] = $msg ;              $i++;            }          }        }      }      $errorCount = count($errorMsg);      if($errorCount > 0)       {        $res = array("status" => '-4',"error_msg" => $errorMsg) ;        echo Yii::app()->JsonWebservice->response($res);      }      else      {      ?>      	<?php      	$data = array();      	$public_key = 'faceid'; // public key this is passed to api as user identifier		$private_key = 'c1IaqR8Dp7L6sLVbq5b2VlsouTN0ezNAYYnmf0WGb6zbxT7P'; // private key, never pass this!! only used in hashing		foreach($_REQUEST as $name => $value) 		{				//if(!in_array($name, $ignore)) 				//{					$data['data'][$name] = $value;				//}		}		// add timestamp at the end of the data array		$data['data']['timestamp'] = time();		$time = time();		if(!empty($image1) && $image1 != "" || !empty($image2) && $image2 != "" || !empty($image3) && $image3 != "" || !empty($image4) && $image4 != "" || !empty($image5) && $image5 != "")		{			if($image1) 			{	  				$error_upload1 = 0;				$final_image1 = "";    			if($image1 !== '')     			{    				$current_time = time();					$output_file1 = $imagepath.$current_time.'.jpeg';					$decodedVideoData = base64_decode($image1);					if(!$fp = fopen($output_file1, 'w')){						$error_upload1 = 1;					}					if(fwrite($fp, $decodedVideoData)===false){						$error_upload1 = 1;					}					fclose($fp);					if($error_upload1 == 0)					{						$final_image1 = $current_time.'.jpeg';					}			       	$image_data1 = file_get_contents($output_file1);			       	//$image_data1 = file_get_contents($image1);			    	if($image_data1) 			    	{			    		$data['data']['images'][] = base64_encode($image_data1);			    		//$data['data']['images'][] = $image_data1;			    	}		    	}	    	}	    	if($image2) 			{	  				$error_upload2 = 0;				$final_image2 = "";    			if($image2 !== '')     			{    				$current_time = time();					$output_file2 = $imagepath.$current_time.'.jpeg';					$decodedVideoData = base64_decode($image2);					if(!$fp = fopen($output_file2, 'w')){						$error_upload2 = 1;					}					if(fwrite($fp, $decodedVideoData)===false){						$error_upload2 = 1;					}					fclose($fp);					if($error_upload2 == 0)					{						$final_image2 = $current_time.'.jpeg';					}			       	$image_data2 = file_get_contents($output_file2);			       	//$image_data1 = file_get_contents($image1);			    	if($image_data2) 			    	{			    		$data['data']['images'][] = base64_encode($image_data2);			    		//$data['data']['images'][] = $image_data1;			    	}		    	}	    	}	    	if($image3) 			{	  				$error_upload3 = 0;				$final_image3 = "";    			if($image3 !== '')     			{    				$current_time = time();					$output_file3 = $imagepath.$current_time.'.jpeg';					$decodedVideoData = base64_decode($image3);					if(!$fp = fopen($output_file3, 'w')){						$error_upload3 = 1;					}					if(fwrite($fp, $decodedVideoData)===false){						$error_upload3 = 1;					}					fclose($fp);					if($error_upload3 == 0)					{						$final_image3 = $current_time.'.jpeg';					}			       	$image_data3 = file_get_contents($output_file3);			       	//$image_data1 = file_get_contents($image1);			    	if($image_data3) 			    	{			    		$data['data']['images'][] = base64_encode($image_data3);			    		//$data['data']['images'][] = $image_data1;			    	}		    	}	    	}	    	if($image4) 			{	  				$error_upload4 = 0;				$final_image4 = "";    			if($image4 !== '')     			{    				$current_time = time();					$output_file4 = $imagepath.$current_time.'.jpeg';					$decodedVideoData = base64_decode($image4);					if(!$fp = fopen($output_file4, 'w')){						$error_upload4 = 1;					}					if(fwrite($fp, $decodedVideoData)===false){						$error_upload4 = 1;					}					fclose($fp);					if($error_upload4 == 0)					{						$final_image4 = $current_time.'.jpeg';					}			       	$image_data4 = file_get_contents($output_file4);			       	//$image_data1 = file_get_contents($image1);			    	if($image_data4) 			    	{			    		$data['data']['images'][] = base64_encode($image_data4);			    		//$data['data']['images'][] = $image_data1;			    	}		    	}	    	}	    	if($image5) 			{	  				$error_upload5 = 0;				$final_image5 = "";    			if($image5 !== '')     			{    				$current_time = time();					$output_file5 = $imagepath.$current_time.'.jpeg';					$decodedVideoData = base64_decode($image5);					if(!$fp = fopen($output_file5, 'w')){						$error_upload5 = 1;					}					if(fwrite($fp, $decodedVideoData)===false){						$error_upload5 = 1;					}					fclose($fp);					if($error_upload5 == 0)					{						$final_image5 = $current_time.'.jpeg';					}			       	$image_data5 = file_get_contents($output_file5);			       	//$image_data1 = file_get_contents($image1);			    	if($image_data5) 			    	{			    		$data['data']['images'][] = base64_encode($image_data5);			    		//$data['data']['images'][] = $image_data1;			    	}		    	}	    	}		}	$data['public_key'] = $public_key;	$data['data'] = json_encode($data['data']);	$data['token'] = sha1($data['data'] . $private_key);	$data['request'] = $request;	if($data) 	{		$ch = curl_init();	    curl_setopt($ch, CURLOPT_URL, 'http://approvedtrader.directory/api/v1/' .$data['request']. '/');	    curl_setopt($ch,CURLOPT_POST, count($data));		curl_setopt($ch,CURLOPT_POSTFIELDS, $data);	 	    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.org/yay.htm');	 	    curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');		    curl_setopt($ch, CURLOPT_HEADER, 0); // Include header in result? (0 = yes, 1 = no)	    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Should cURL return or print out the data? (true = return, false = print)	    curl_setopt($ch, CURLOPT_TIMEOUT, 10); // Timeout in seconds	 	    $output = curl_exec($ch);	    //$output1 = stripslashes($output);	    curl_close($ch);  // Close the cURL resource, and free system resources	    $CurlResponse = json_decode($output);	}		// echo "<pre>";		// print_r($CurlResponse->model_id);		// die;		$q1 = $CurlResponse->model_id;		if(!empty($q1) && $q1 != '' && $q1 != null && $q1 != 'null' && $q1 != 'Null' && $q1 != 'NULL')		{			$user_detail['data'] = array('status'=>"1",'data'=>$CurlResponse);			//echo "<pre>";			//print_r($user_detail['data']).'<br>';			echo json_encode($user_detail['data']);			die;			//echo Yii::app()->JsonWebservice->response($user_detail['data']);		}		// elseif($output == '4:Face too small for face recognition.4:Face too small for face recognition.null')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Face too small for face recognition"}';  //           echo $status;  //           die;		// }		// elseif($output == '4:Face too small for face recognition.')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Face too small for face recognition"}';  //           echo $status;  //           die;		// }		// elseif($output == '4:Face too small for face recognition')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Face too small for face recognition"}';  //           echo $status;  //           die;		// }		// elseif($output == '4:Face too small for face recognition.null')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Face too small for face recognition"}';  //           echo $status;  //           die;		// }		// elseif($output == '4:Face too small for face recognition.null.')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Face too small for face recognition"}';  //           echo $status;  //           die;		// }		// elseif($output == '13:Image without face.13:Image without face.null')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Image without face"}';  //           echo $status;  //           die;		// }		// elseif($output == '13:Image without face.')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Image without face"}';  //           echo $status;  //           die;		// }		// elseif($output == '13:Image without face')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Image without face"}';  //           echo $status;  //           die;		// }		// elseif($output == '13:Image without face.null')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Image without face"}';  //           echo $status;  //           die;		// }		// elseif($output == '10:Image too large.')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"Image without face"}';  //           echo $status;  //           die;		// }		// elseif($output == '4:The input face is too close to an image border to do face recognition.')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"The input face is too close to an image border to do face recognition."}';  //           echo $status;  //           die;		// }		// elseif($output == '4:The input face is too close to an image border to do face recognition')		// {		// 	//$status = '{"status":"-1"}';		// 	$status = '{"status":"-2","msg":"The input face is too close to an image border to do face recognition"}';  //           echo $status;  //           die;		// }		else		{			// $status = '{"status":"-1"}';   //          echo $status;   //          die;			$user_detail['data'] = array('status'=>"-1",'data'=>$CurlResponse);			//echo "<pre>";			//print_r($user_detail['data']).'<br>';			echo json_encode($user_detail['data']);			die;		}		// if($output == '{"error":"Facial recognition failed"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '13:Image without face.13:Image without face.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '13:Image without face.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '13:Image without face.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '14:Model without face.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '14:Model without face.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '14:Model without face.14:Model without face.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '15:Description')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '16:Compute unit limit reached.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '16:Compute unit limit reached.16:Compute unit limit reached.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '12:Forbidden')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '11:Description')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '10:Image too large.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '10:Image too large.10:Image too large.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == "9:Can't read image.")		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == "9:Can't read image.9:Can't read image.null")		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '8:Maximum file size exceeded.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '8:Maximum file size exceeded.8:Maximum file size exceeded.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '7:Problem downloading image.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '7:Problem downloading image.7:Problem downloading image.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '6:Too many models for face recognition.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '6:Too many models for face recognition.6:Too many models for face recognition.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '5:Storage error.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '5:Storage error.5:Storage error.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '4:The input face is too close to an image border to do face recognition.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '4:The input face is too close to an image border to do face recognition.4:The input face is too close to an image border to do face recognition.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '3:Request timeout.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '3:Request timeout.3:Request timeout.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '2:Page not found.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '2:Page not found.2:Page not found.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '1:Url too long (> 200 characteres).')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '1:Url too long (> 200 characteres).1:Url too long (> 200 characteres).null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '0:Internal error.')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == ' 4:Face too small for face recognition.4:Face too small for face recognition.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '0:Internal error.0:Internal error.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '{"error":"model_id is a required field to verify face"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '{"error":"No user has that model_id"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '{"error":"Minimum of 2 images are required for model verification"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '{"error":"Model images required for model verification"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '{"error":"Unable to connect to authentication server"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == 'null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif(empty($output))		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// else		// {		// 	$user_detail['data'] = array('status'=>"1",'data'=>$CurlResponse);		// 	//echo "<pre>";		// 	//print_r($user_detail['data']).'<br>';		// 	echo json_encode($user_detail['data']);		// 	die;		// 	//echo Yii::app()->JsonWebservice->response($user_detail['data']);		// }      }    }     /*Login Service*///  public function actionLogin()//  {////    $post = $_REQUEST ;//    $email = $_REQUEST['email'];//    $password = $_REQUEST['password'];////    $request = "authenticateUser"; //    //      /*Validate fields*///      $validate = array("email" => array("require" => 1 ,"msg" => "Email is required."),//      					"password" => array("require" => 1 ,"msg" => "Password is required."),//      );//      $errorMsg = array();//      $i=0;//      foreach ($post as $key => $value) //      {//        if(array_key_exists($key,$validate) )//        {//          $required = $validate[$key]["require"];//          $msg =  $validate[$key]["msg"];//          if($required == 1) //          {//            if($value == '') //            {//              $errorMsg[$i] = $msg ;//              $i++;//            }//          }//        }//      }//      $errorCount = count($errorMsg);//      if($errorCount > 0) //      {//        $res = array("status" => '-4',"error_msg" => $errorMsg) ;//        echo Yii::app()->JsonWebservice->response($res);//      }//      else//      {//     //      	$data = array();//      	$public_key = 'faceid'; // public key this is passed to api as user identifier//		$private_key = 'c1IaqR8Dp7L6sLVbq5b2VlsouTN0ezNAYYnmf0WGb6zbxT7P'; // private key, never pass this!! only used in hashing////		foreach($_REQUEST as $name => $value) {//			//if(!in_array($name, $ignore)) {//				$data['data'][$name] = $value;//			//}//		}////		// add timestamp at the end of the data array//		$data['data']['timestamp'] = time();//		$time = time();////		$data['public_key'] = $public_key;//		$data['data'] = json_encode($data['data']);//		$data['token'] = sha1($data['data'] . $private_key);//		$data['request'] = $request;////		if($data) //		{////			$ch = curl_init();////		    curl_setopt($ch, CURLOPT_URL, 'http://approvedtrader.directory/api/v1/' . $data['request'] . '/');//		    curl_setopt($ch,CURLOPT_POST, count($data));//			curl_setopt($ch,CURLOPT_POSTFIELDS, $data);	 //		    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.org/yay.htm');	 //		    curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');	//		    curl_setopt($ch, CURLOPT_HEADER, 0); // Include header in result? (0 = yes, 1 = no)//		    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Should cURL return or print out the data? (true = return, false = print)//		    curl_setopt($ch, CURLOPT_TIMEOUT, 10); // Timeout in seconds//		 //		    $output = curl_exec($ch);////		    curl_close($ch);  // Close the cURL resource, and free system resources//		    $CurlResponse = json_decode($output);//		    // echo $output;//		    // die;//		}////		$response_new = array($output);////		if($output != '{"error":"User authentication: user not found"}')//		{//			$finalResponse = array('status'=>"1",'data'=> $CurlResponse);//			echo json_encode($finalResponse);//			die;//			//echo Yii::app()->JsonWebservice->response($user_detail['data']);//		}//		else//		{//			$status = '{"status":"-1"}';//            echo $status;//            die;//		}//	   }////    }    public function actionLogin()  {    $post = $_REQUEST ;    $email = $_REQUEST['email'];    $password = $_REQUEST['password'];    $request = "authenticateUser";           /*Validate fields*/      $validate = array("email" => array("require" => 1 ,"msg" => "Email is required."),      					"password" => array("require" => 1 ,"msg" => "Password is required."),      );      $errorMsg = array();      $i=0;      foreach ($post as $key => $value)       {        if(array_key_exists($key,$validate) )        {          $required = $validate[$key]["require"];          $msg =  $validate[$key]["msg"];          if($required == 1)           {            if($value == '')             {              $errorMsg[$i] = $msg ;              $i++;            }          }        }      }      $errorCount = count($errorMsg);      if($errorCount > 0)       {        $res = array("status" => '-4',"error_msg" => $errorMsg) ;        echo Yii::app()->JsonWebservice->response($res);      }      else      {            	$data = array();      	$public_key = 'faceid'; // public key this is passed to api as user identifier		$private_key = 'c1IaqR8Dp7L6sLVbq5b2VlsouTN0ezNAYYnmf0WGb6zbxT7P'; // private key, never pass this!! only used in hashing		foreach($_REQUEST as $name => $value) {			//if(!in_array($name, $ignore)) {				$data['data'][$name] = $value;			//}		}		// add timestamp at the end of the data array		$data['data']['timestamp'] = time();		$time = time();		$data['public_key'] = $public_key;		$data['data'] = json_encode($data['data']);		$data['token'] = sha1($data['data'] . $private_key);                //var_dump($request);		$data['request'] = $request;//                print_r($data);die;                //echo 'http://face.id/api/v1/' . $data['request'];die;		if($data) 		{                    $ch = curl_init();//		    curl_setopt($ch, CURLOPT_URL, 'http://approvedtrader.directory/api/v1/' . $data['request'] . '/');		    curl_setopt($ch, CURLOPT_URL, 'http://face.id/api/v1/' . $data['request'] . '/');		    curl_setopt($ch,CURLOPT_POST, count($data));                    curl_setopt($ch,CURLOPT_POSTFIELDS, $data);	 		    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.org/yay.htm');	 		    curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');			    curl_setopt($ch, CURLOPT_HEADER, 0); // Include header in result? (0 = yes, 1 = no)		    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Should cURL return or print out the data? (true = return, false = print)		    curl_setopt($ch, CURLOPT_TIMEOUT, 10); // Timeout in seconds		 		    $output = curl_exec($ch);                    		    curl_close($ch);  // Close the cURL resource, and free system resources		    $CurlResponse = json_decode($output);//                    echo "hi";//                    var_dump($output);//                    die;		}                //                print_r($output);die;		$response_new = array($output);		if($output != '{"error":"User authentication: user not found"}')		{                    /*                     * if not traider then default set to 0                      * bt check in db and if value 1 then user is trader.                     */                     /*                     * if model are added or not by user                     * set flag                     */                    $is_model_created = 0;                    $is_traider = 0;                    $user_id = $CurlResponse->user_id;//                    print_r($user_id);die;                    if(isset($user_id) && !empty($user_id)){                        $wp_traders_table = "wp_traders";                        $selecttrailders = "select * from $wp_traders_table where user_id = $user_id";                        $traiders = Yii::app()->JsonWebservice->getRowData($selecttrailders);                        if(!empty($traiders)){                           $is_traider = 1;                         }                        $traider_id = "";                        $trader_profile = "";                        if($is_traider == 1){                                                       $traider_id = $traiders["id"];                            $trader_profile = json_decode($traiders["trader_profile"]);                        }                        $faceid_keylemon_models_table = "faceid_keylemon_models";                            $fetch["table"] = $faceid_keylemon_models_table;                        $fetch["fields"] = "*";                        $fetch["beforeWhere"] = " ";                        $fetch["afterWhere"] = " user_id = $user_id";                        $fetch["r_p_p"] = "";                        $fetch["start"] = "";                        //  print_r($postdata);die;                        $response_data = Yii::app()                                ->JsonWebservice                                ->fetchData($fetch, $dataobj = 'db');                        if($response_data['status']==1 && $response_data['totalRecord']>0){                            $is_model_created = 1;                        }                        $identityID="";                        if($is_model_created==1){                            $identityID = $response_data['data'][0]['identity_id'];                          }                        $finalResponse = array('status'=>"1",'data'=> $CurlResponse,'is_traider'=>$is_traider,"trader_id"=>$traider_id,"trader_profile"=>$trader_profile,'is_model_created'=>$is_model_created,"identityID"=>$identityID);                        echo json_encode($finalResponse);                        die;                    }else{                        $status = '{"status":"-1"}';                        echo $status;                        die;                    }                                                               //echo Yii::app()->JsonWebservice->response($user_detail['data']);		}		else		{			$status = '{"status":"-1"}';            echo $status;            die;		}	   }    }      /*Verify Voice Service*/  public function actionVerifyVoice()  {  	$imagepath = dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . "images" .DIRECTORY_SEPARATOR . "Video" .DIRECTORY_SEPARATOR;    $post = $_REQUEST ;    $voice = $_REQUEST['voice'];    //$model_id = (isset($_REQUEST['model_id'])) ? $_REQUEST['model_id'] : '1f98e00f-4ba2-42a5-953a-abdc21826892'; // get this from authenticating the user (this is example model id with user id 1)    $model_id = $_REQUEST['model_id'];    $id = (isset($_REQUEST['user_id'])) ? $_REQUEST['user_id'] : 40; // get this from authenticatiing the user    $request = "verifyVoice";           /*Validate fields*/      $validate = array("model_id" => array("require" => 1 ,"msg" => "Model Id is required."),      );      $errorMsg = array();      $i=0;      foreach ($post as $key => $value)       {        if(array_key_exists($key,$validate) )        {          $required = $validate[$key]["require"];          $msg =  $validate[$key]["msg"];          if($required == 1)           {            if($value == '')             {              $errorMsg[$i] = $msg ;              $i++;            }          }        }      }      $errorCount = count($errorMsg);      if($errorCount > 0)       {        $res = array("status" => '-4',"error_msg" => $errorMsg) ;        echo Yii::app()->JsonWebservice->response($res);      }      else      {      ?>      	<?php      	$data = array();		$public_key = 'faceid'; // public key this is passed to api as user identifier		$private_key = 'c1IaqR8Dp7L6sLVbq5b2VlsouTN0ezNAYYnmf0WGb6zbxT7P'; // private key, never pass this!! only used in hashing		foreach($_REQUEST as $name => $value) 		{				//if(!in_array($name, $ignore)) 				//{					$data['data'][$name] = $value;				//}		}		// add timestamp at the end of the data array		$data['data']['timestamp'] = time();		$time = time();		$data['data']['voice'] = array();		if(!empty($voice) && $voice != "") 		{	  			$error_upload1 = 0;			$final_image1 = "";			if($voice !== '') 			{				$current_time = time();				$output_file1 = $imagepath.$current_time.'.mp3';				$decodedVideoData = base64_decode($voice);				if(!$fp = fopen($output_file1, 'w')){					$error_upload1 = 1;				}				if(fwrite($fp, $decodedVideoData)===false){					$error_upload1 = 1;				}				fclose($fp);				if($error_upload1 == 0)				{					$final_image1 = $current_time.'.mp3';				}		       	$voice_data1 = file_get_contents($output_file1);		       	//$image_data1 = file_get_contents($image1);		    	if($voice_data1) 		    	{		    		$data['data']['voice'][] = base64_encode($voice_data1);		    		//$data['data']['images'][] = $image_data1;		    	}	    	}    	}	$data['public_key'] = $public_key;	$data['data'] = json_encode($data['data']);	$data['token'] = sha1($data['data'] . $private_key);	$data['request'] = $request;	if($data) 	{		$ch = curl_init();	    curl_setopt($ch, CURLOPT_URL, 'http://approvedtrader.directory/api/v1/' .$data['request']. '/');	    //curl_setopt($ch, CURLOPT_URL, 'http://localhost/faceid%20api/api/v1/' .$request. '/');	    curl_setopt($ch,CURLOPT_POST, count($data));		curl_setopt($ch,CURLOPT_POSTFIELDS, $data);	 	    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.org/yay.htm');	 	    curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');		    curl_setopt($ch, CURLOPT_HEADER, 0); // Include header in result? (0 = yes, 1 = no)	    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Should cURL return or print out the data? (true = return, false = print)	    curl_setopt($ch, CURLOPT_TIMEOUT, 10); // Timeout in seconds	 	   	$output = curl_exec($ch);	    curl_close($ch);  // Close the cURL resource, and free system resources	    $CurlResponse = json_decode($output);	}		$response_new = array($output);		$q1 = $CurlResponse->model_id;		if(!empty($q1) && $q1 != '' && $q1 != null && $q1 != 'null' && $q1 != 'Null' && $q1 != 'NULL')		{			$user_detail['data'] = array('status'=>"1",'data'=>$CurlResponse);			//echo "<pre>";			//print_r($user_detail['data']).'<br>';			echo json_encode($user_detail['data']);			die;			//echo Yii::app()->JsonWebservice->response($user_detail['data']);		}		else		{			$status = '{"status":"-1"}';            echo $status;            die;		}		// if($output == '11:Expected at least one of these parameters: urls, faces, datas or upload images in the body of the request.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '21:The audio file is invalid.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '{"error":"Facial recognition failed"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == 'null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif(empty($output))		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '{"error":"model_id is required for voice authentication"}')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// elseif($output == '24:The audio sample is too short.null')		// {		// 	$status = '{"status":"-1"}';  //           echo $status;  //           die;		// }		// else		// {		// 	$user_detail['data'] = array('status'=>"1",'data'=>$CurlResponse);		// 	echo json_encode($user_detail['data']);		// 	die;		// }      }    }     /*Tradel-model-request-id Service*/  public function actionTraderModelRequest()  {    $post = $_REQUEST ;    $member_id = $_REQUEST['member_id'];    $modality = $_REQUEST['modality']; /*Faces or Voices*/    $request = "traderModelRequest";           /*Validate fields*/      $validate = array("member_id" => array("require" => 1 ,"msg" => "Member Id is required."),      					"modality" => array("require" => 1 ,"msg" => "Modality is required."),      );      $errorMsg = array();      $i=0;      foreach ($post as $key => $value)       {        if(array_key_exists($key,$validate) )        {          $required = $validate[$key]["require"];          $msg =  $validate[$key]["msg"];          if($required == 1)           {            if($value == '')             {              $errorMsg[$i] = $msg ;              $i++;            }          }        }      }      $errorCount = count($errorMsg);      if($errorCount > 0)       {        $res = array("status" => '-4',"error_msg" => $errorMsg) ;        echo Yii::app()->JsonWebservice->response($res);      }      else      {      ?>      	<?php      	$data = array();      	$public_key = 'faceid'; // public key this is passed to api as user identifier		$private_key = 'c1IaqR8Dp7L6sLVbq5b2VlsouTN0ezNAYYnmf0WGb6zbxT7P'; // private key, never pass this!! only used in hashing		foreach($_REQUEST as $name => $value) {			//if(!in_array($name, $ignore)) {				$data['data'][$name] = $value;			//}		}		// add timestamp at the end of the data array		$data['data']['timestamp'] = time();		$data['public_key'] = $public_key;		$data['data'] = json_encode($data['data']);		$data['token'] = sha1($data['data'] . $private_key);		$data['request'] = $request;		if($data) 		{			$ch = curl_init();		    curl_setopt($ch, CURLOPT_URL, 'http://approvedtrader.directory/api/v1/' . $data['request'] . '/');		    curl_setopt($ch,CURLOPT_POST, count($data));			curl_setopt($ch,CURLOPT_POSTFIELDS, $data);	 		    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.org/yay.htm');	 		    curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');			    curl_setopt($ch, CURLOPT_HEADER, 0); // Include header in result? (0 = yes, 1 = no)		    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Should cURL return or print out the data? (true = return, false = print)		    curl_setopt($ch, CURLOPT_TIMEOUT, 10); // Timeout in seconds		 		    $output = curl_exec($ch);		    curl_close($ch);  // Close the cURL resource, and free system resources			$CurlResponse = json_decode($output);		    // echo $output;		    // die;		}		$response_new = array($output);		//if($output != '{"error":"Trader model request: model not found"}' || $output != '{"error":"Trader model request: trader not found"}')		if($output == '{"error":"Trader model request: model not found"}')		{			$status = '{"status":"-1"}';            echo $status;            die;		}		elseif($output == '{"error":"Trader model request: trader not found"}')		{			$status = '{"status":"-1"}';            echo $status;            die;		}		else		{            $finalResponse = array('status'=>"1",'data'=> $CurlResponse);			echo json_encode($finalResponse);			die;		}	   }    }  /*Business Card Service*/  public function actionBusinessCard()  {    $post = $_REQUEST ;    $member_id = $_REQUEST['member_id'];    $trader_name = $_REQUEST['trader_name'];           /*Validate fields*/      $validate = array("member_id" => array("require" => 1 ,"msg" => "Member Id is required."),      					"trader_name" => array("require" => 1 ,"msg" => "Trader Name is required."),      );      $errorMsg = array();      $i=0;      foreach ($post as $key => $value)       {        if(array_key_exists($key,$validate) )        {          $required = $validate[$key]["require"];          $msg =  $validate[$key]["msg"];          if($required == 1)           {            if($value == '')             {              $errorMsg[$i] = $msg ;              $i++;            }          }        }      }      $errorCount = count($errorMsg);      if($errorCount > 0)       {        $res = array("status" => '-4',"error_msg" => $errorMsg) ;        echo Yii::app()->JsonWebservice->response($res);      }      else      {      ?>       <?php        $output = "https://approvedtrader.directory/traders/?trader=".$trader_name."&tid=".$member_id;        if(!empty($output))        {        	$response_new = array($output);        	$finalResponse = array('status'=>"1",'data'=> $response_new);			echo json_encode($finalResponse);			die;        }		else		{			$status = '{"status":"-1"}';            echo $status;            die;		}	   }    }        public function doPost($url, $config = NULL, $params = NULL, $localFile = NULL, $fileUploadFormName = NULL, $methodType = "")    {        try        {                $client = new EHttpClient($url);                if(isset($methodType) && $methodType != "")                {                    $client->setMethod(EHttpClient::POST);                }                else                {                    $client->setMethod(EHttpClient::GET);                }                $client->setParameterPost($params);                if($localFile)                {                        // Upload item to database                        $client->setFileUpload($localFile, $fileUploadFormName);                }                $response = $client->request();        }        catch (Exception $e)        {                $response = new EHttpResponse('Client side exception', array(), "", '1.1', PHP_EOL. 'Exception: ' . $e->getMessage() . PHP_EOL);        }        return $response->getBody();    }        /**     * Function to create stream for face recognization     */    public function actionGetStream()    {        $post = $_POST;        $require = array('user', 'key', 'identity');                $error = 0;        $msg = array();        foreach($post as $key => $val) {            if(in_array($key,$require)) {               if($post[$key] == '') {                $error++;                $msg[] = "$key is required!";               }            }        }        if($error > 0) {           $response = array("status"=>'-2',"post" => $post,"error_msg"=>$msg);        }        else        {            $user = $post['user'] ? $post['user']: "approvedid";            $key = $post['key'] ? $post['key']: "Ycsss77jU4UG3AURETdDmua3B3GaaxGIRJzIT1s0bqbIGLfAIn1pQ7";            $identity = $post['identity'] ? $post['identity']: "5df8dc68-3948-4383-a8c9-43118930c983";                        $keyLemonUrl = "https://api.keylemon.com/api/stream?";                        $postResponse = $this->doPost            (                $keyLemonUrl,                array('timeout' => SHORT_OPERATION_TIMEOUT),                array(                    'user' => $user,                    'key' => $key,                    'identity' => $identity                ),                NULL,                NULL,                'POST'            );            $postResponse = json_decode($postResponse);                        if(isset($postResponse->uid) && $postResponse->uid != "")            {                $response = array('status' => "1", 'uid' => $postResponse->uid);            }            else            {                /**                 * This is for error handling. It may change.                 */                $response = array('status' => "-1", 'uid' => "1");            }        }        $final_response = array("response" => $response);        echo json_encode($final_response);        die;    }        public function actionOpenStream()    {        $post = $_POST;        $require = array('user', 'key', 'stream_id');        $date1 = date("Y-m-d H:i:s");                $error = 0;        $msg = array();        foreach($post as $key => $val) {            if(in_array($key,$require)) {               if($post[$key] == '') {                $error++;                $msg[] = "$key is required!";               }            }        }        if($error > 0) {           $response = array("status"=>'-2',"post" => $post,"error_msg"=>$msg);        }        else        {            $user = $post['user'] ? $post['user']: "approvedid";            $key = $post['key'] ? $post['key']: "Ycsss77jU4UG3AURETdDmua3B3GaaxGIRJzIT1s0bqbIGLfAIn1pQ7";            $stream_id = $post['stream_id'] ? $post['stream_id']: "";                        $keyLemonUrl = "https://api.keylemon.com/api/stream/{$stream_id}?user={$user}&key={$key}";                        $finalResponse = false;            $isAuthenticated = false;            while($finalResponse != true)            {                $postResponse = $this->doPost                                (                                    $keyLemonUrl,                                    array('timeout' => SHORT_OPERATION_TIMEOUT),                                    array()                                    );                $lastResponse = json_decode($postResponse);                                if(!isset($lastResponse->errors))                {                    if($lastResponse->closed == '1') {                        $finalResponse = true;                        $isAuthenticated = $lastResponse->authenticated;                        break;                    }                }                                $currentTime = date("Y-m-d H:i:s");                $timeFirst  = strtotime($date1);                $timeSecond = strtotime($currentTime);                $differenceInSeconds = $timeSecond - $timeFirst;                if($differenceInSeconds > 60 && $finalResponse != true)                {                    $response = array('status' => "-4", 'message' => "Please reestablish connection again.");                    $final_response = array("response" => $response);                    echo json_encode($final_response);                    die;                }            }            $response = array('status' => "1", 'is_authenticated' => $isAuthenticated);        }        $final_response = array("response" => $response);        echo json_encode($final_response);        die;    }    /*        webservice for add models	*/   public function actionAddUserModels(){	$post = $_POST;	 	/*	data post are added to the the table faceid_keylemon_models	*/	$require = array('user_id', 'identity_id','model_id');        $error = 0;        $msg = array();        foreach ($post as $key => $val) {            if (in_array($key, $require)) {                if ($post[$key] == '') {                    $error++;                    $msg[] = "$key is required!";                }            }        }        if ($error > 0) {            /*             * if empty require field             */            $response = array("status" => '-2', "message" => $msg);            echo json_encode(array("response" => $response));            die;        } else {        	$faceid_keylemon_models_table = "faceid_keylemon_models";        	$user_id = $post['user_id'];        	$identity_id = $post['identity_id'];        	$model_id = explode(',', $post['model_id']);//                print_r($model_id);die;        	/*                add fixed value        	*/                 foreach ($model_id as $model) {                                       $add_models = array(                                    'user_id'=>$user_id,                                    'identity_id'=>$identity_id,                                    'model_id'=>$model,                                    'modality'=>"faces",                                    'active'=>1                             );                   $add_response = Yii::app()                        ->JsonWebservice                        ->addData($faceid_keylemon_models_table, $add_models, $nfield = "", $uniqueField = "", $lastIdStatus = 1, $fieldEncode = "", $dataobj = 'db');                }		 	            if($add_response['status']==1){            		$response = array("status" => '1', "message" => "Models are added.");		            echo json_encode(array("response" => $response));		            die;             }else{            	$response = array("status" => '-1', "message" => "some problem to add models.");	            echo json_encode(array("response" => $response));	            die;            }        }}/* * webservice for update model *  */    public function actionUpdateModeldata(){        $post = $_POST;        /*	data post are added to the the table faceid_keylemon_models	*/	$require = array('user_id','old_model_id','new_model_id');        $error = 0;        $msg = array();        foreach ($post as $key => $val) {            if (in_array($key, $require)) {                if ($post[$key] == '') {                    $error++;                    $msg[] = "$key is required!";                }            }        }        if ($error > 0) {            /*             * if empty require field             */            $response = array("status" => '-2', "message" => $msg);            echo json_encode(array("response" => $response));            die;        } else {        	$faceid_keylemon_models_table = "faceid_keylemon_models";                $user_id = $post['user_id'];                $old_model_id = $post['old_model_id'];                $new_model_id = $post['new_model_id'];                                 $post_update["model_id"] = $post['new_model_id'];                $where_update = "user_id = $user_id AND model_id = '".$old_model_id."'";                $selectdata = "select * from $faceid_keylemon_models_table where $where_update";                $usermodeldata = Yii::app()->JsonWebservice->getRowData($selectdata);               if(!empty($usermodeldata)){                    $response_updatemodel = Yii::app()                            ->JsonWebservice                            ->updateData($faceid_keylemon_models_table, $post_update, $nfield = "", $uniqueField = "", $where_update, $fieldEncode = "", $dataobj = 'db');                    if($response_updatemodel["status"]==1){                        $response = array("status" => '1', "message" => "Model SuccesFully Updated.");                        echo json_encode(array("response" => $response));                        die;                    }else{                        $response = array("status" => '-1', "message" => "something problem there.");                        echo json_encode(array("response" => $response));                        die;                    }                }else{                      $response = array("status" => '-1', "message" => "something problem there.");                        echo json_encode(array("response" => $response));                        die;                }        }    }         /*      * webservice for get the data of traders      * input parameter is trader_id      */     public function actionTraderInfo(){         $post = $_POST;         /*	data post are added to the the table faceid_keylemon_models	*/	$require = array('trader_id');        $error = 0;        $msg = array();        foreach ($post as $key => $val) {            if (in_array($key, $require)) {                if ($post[$key] == '') {                    $error++;                    $msg[] = "$key is required!";                }            }        }        if ($error > 0) {            /*             * if empty require field             */            $response = array("status" => '-2', "message" => $msg);            echo json_encode(array("response" => $response));            die;        } else {            $trader_id = $post['trader_id'];                        $trader_table = "wp_traders";            $where_trader = "id = $trader_id";            $selecttrader = "select * from $trader_table where $where_trader";            $traderinfo = Yii::app()->JsonWebservice->getRowData($selecttrader);//           print_r($traderinfo);die;            if(!empty($traderinfo)){                $trader_profile = json_decode($traderinfo['trader_profile']);//                print_r($traderinfo);//                print_r($trader_profile);die;                $user_id = $traderinfo['user_id'];                $table_faceid_keylemon_models = "faceid_keylemon_models";                $where_faceid_keylemon_models = "user_id = $user_id";                $selectuseridentity = "select * from $table_faceid_keylemon_models where $where_faceid_keylemon_models";                $useridentity = Yii::app()->JsonWebservice->getRowData($selectuseridentity);                if(!empty($useridentity)){                    $identity_id = $useridentity['identity_id'];                    $response = array("status" => '1','trader_profile'=>$trader_profile,'identity_id'=>$identity_id, "message" => "Traders Info.");                    echo json_encode(array("response" => $response));                    die;                }//                $response = array("status" => '2','trader_profile'=>$trader_profile, "message" => "Traders Infoavailable but identityid is not exists.");                $response = array("status" => '-1',"message" => "Trader not found.");                echo json_encode(array("response" => $response));                die;            }else{                $response = array("status" => '-1', "message" => "Trader not found.");                echo json_encode(array("response" => $response));                die;            }        }            }         /*     * webservices for testfaceid     *      */    /*     * actionInsertImages NOT IN USE use insertrecord     */    public function actionInsertImages(){        $post = $_POST;                  $require = array('user_name', 'tracer_id','result');        $error = 0;        $msg = array();        foreach ($post as $key => $val) {            if (in_array($key, $require)) {                if ($post[$key] == '') {                    $error++;                    $msg[] = "$key is required!";                }            }        }        if ($error > 0) {            /*             * if empty require field             */            $response = array("status" => '-2', "message" => $msg);            echo json_encode(array("response" => $response));            die;        } else {            $user_name = $post['user_name'];            $tracer_id = $post['tracer_id'];            $result = $post['result'];            $images = isset($post['image'])?$post['image']:"";            $image = explode(',',$images);                        $FaceMaster = new FaceMaster();            $FaceMaster->user_name = $user_name;            $FaceMaster->tracer_id = $tracer_id;            $FaceMaster->result = $result;            $FaceMaster->created_on = date('Y-m-d H:i:s');//            print_r($FaceMaster);die;            if($FaceMaster->save()){                /*                 * get the new inserted records PK                 */                $FaceMasterprimarykey = $FaceMaster->getPrimaryKey();//                print_r($FaceMasterprimarykey);die;             /*              * for giving proper response set flag $status=2              * if $status =1 then user added with images               * if $status =0 then user added with not images added and some problems with image               *               */                             $stauts = 2;                if(!empty($image) && $image[0]!==""){                    foreach ($image as $i){                                              $FaceImageMaster = new FaceImageMaster();                         $FaceImageMaster->fm_id = $FaceMasterprimarykey;                        $FaceImageMaster->tracer_id = $tracer_id;                        $FaceImageMaster->image = $i;                        $FaceImageMaster->created_on = date('Y-m-d H:i:s');//                        print_r($FaceImageMaster);die;                        if($FaceImageMaster->save()){                             $status = 1;                         }else{                             //                                 print_r($FaceImageMaster->getErrors());                            $status = 0;                        }                                            }//                    print_r($status);die;                    if($status==1){                        $response = array("status" => '1', "message" => "User Added.");                        echo json_encode(array("response" => $response));                        die;                    }else if($status==0){                        $response = array("status" => '3', "message" => "User added but image have problem.");                        echo json_encode(array("response" => $response));                         die;                    }                }else{                    $response = array("status" => '2', "message" => "User is added but no images are added.");                    echo json_encode(array("response" => $response));                    die;                }            }else{//                echo "<pre>";//                print_r($FaceMaster->getErrors());die;                $response = array("status" => '-1', "message" => "error in saving user.");                echo json_encode(array("response" => $response));                die;            }                               }     }     /*      * insert aimages      * it using multi part      * it will replace the InsertRecord function      * parameters and output are as it is       *       */    public function actionInsertRecord(){         $post = $_POST;                  $require = array('user_name', 'tracer_id','result');        $error = 0;        $msg = array();        foreach ($post as $key => $val) {            if (in_array($key, $require)) {                if ($post[$key] == '') {                    $error++;                    $msg[] = "$key is required!";                }            }        }        if ($error > 0) {            /*             * if empty require field             * member_id             * lat             * lng             */            $response = array("status" => '-2', "message" => $msg);            echo json_encode(array("response" => $response));            die;        } else {            $face_master_table = "face_master";            $user_name = $post['user_name'];            $tracer_id = $post['tracer_id'];            $post['created_on'] =  date('Y-m-d H:i:s');            $result = $post['result'];            $response_addface = Yii::app()               ->JsonWebservice               ->addData($face_master_table, $post, $nfield="", $uniqueField="", $lastIdStatus = 0,$fieldEncode=" ",$dataobj = 'db');//       print_r($response_addface['status']==1);die;//            print_r($post);//            $FaceMaster = new FaceMaster();//            $FaceMaster->user_name = $user_name;//            $FaceMaster->tracer_id = $tracer_id;//            $FaceMaster->result = $result;//            $FaceMaster->created_on = date('Y-m-d H:i:s');//            print_r($FaceMaster);die;            if($response_addface['status']==1){                                                 /*                 * get the new inserted records PK                 *///                $FaceMasterprimarykey = $FaceMaster->getPrimaryKey();               $FaceMasterprimarykey =  $response_addface['lastid'];                            /*              * for giving proper response set flag $status=2              * if $status =1 then user added with images               * if $status =0 then user added with not images added and some problems with image               *               *///                 print_r($_FILES);//                 print_r(count($_FILES));die;                $stauts = 2;                $n_imageArray = array();                if(!empty($_FILES) && count($_FILES)>0){                    //                    $images = $_FILES['image'];//                    $imagepath = 'http://' . $_SERVER['HTTP_HOST'] . Yii::app()->baseUrl . DIRECTORY_SEPARATOR . "images" . DIRECTORY_SEPARATOR . "user" . DIRECTORY_SEPARATOR;//                    $imagepath_thumb = 'http://' . $_SERVER['HTTP_HOST'] . Yii::app()->baseUrl . DIRECTORY_SEPARATOR . "images" . DIRECTORY_SEPARATOR . "user" . DIRECTORY_SEPARATOR . "thumb" . DIRECTORY_SEPARATOR;                    $imagepath = getcwd() . DIRECTORY_SEPARATOR . "images" . DIRECTORY_SEPARATOR . "user" . DIRECTORY_SEPARATOR;                    $imagepath_thumb = getcwd() . DIRECTORY_SEPARATOR . "images" . DIRECTORY_SEPARATOR . "user" . DIRECTORY_SEPARATOR . "thumb" . DIRECTORY_SEPARATOR;                                        foreach ($_FILES['image']['name'] as $f => $name) {                        $image_name = uniqid() . "_" . $name;                        move_uploaded_file($_FILES["image"]["tmp_name"][$f], $imagepath . $image_name);                        if (file_exists($imagepath . $image_name)) {//                            array_push($n_imageArray, $image_name);//                            $thumb = Yii::app()->phpThumb->create($imagepath . $image_name);//                            $thumb->adaptiveResize(100, 100);//                            $thumb->save($imagepath_thumb . $image_name);                        }                        $FaceImageMaster = new FaceImageMaster();                         $FaceImageMaster->fm_id = $FaceMasterprimarykey;                        $FaceImageMaster->tracer_id = $tracer_id;                        $FaceImageMaster->image = $image_name;                        $FaceImageMaster->created_on = date('Y-m-d H:i:s');//                        print_r($FaceImageMaster);die;                        if($FaceImageMaster->save()){                             $status = 1;                         }else{                             //                                 print_r($FaceImageMaster->getErrors());die;                            $status = 0;                        }                    }//                    print_r($images);die;                   //                    print_r($status);die;                    if($status==1){                        $response = array("status" => '1', "message" => "User Added.");                        echo json_encode(array("response" => $response));                        die;                    }else if($status==0){//                        $response = array("status" => '3', "message" => "User added but image have problem.");                        $response = array("status" => '-1', "message" => "error in saving user1.");                        echo json_encode(array("response" => $response));                         die;                    }                }else{//                    $response = array("status" => '2', "message" => "User is added but no images are added.");                     $response = array("status" => '-1', "message" => "error in saving user2.");                    echo json_encode(array("response" => $response));                    die;                }            }else{//                echo "<pre>";//                print_r($FaceMaster->getErrors());die;                $response = array("status" => '-1', "message" => "error in saving user3.");                echo json_encode(array("response" => $response));                die;            }                               }     }          /*      * give identity id       * by the member id      * date 12/06/2015      *       */     public function actionMemberdetails(){         $post = $_POST;                  $require = array('member_id');        $error = 0;        $msg = array();        foreach ($post as $key => $val) {            if (in_array($key, $require)) {                if ($post[$key] == '') {                    $error++;                    $msg[] = "$key is required!";                }            }        }        if ($error > 0) {            /*             * if empty require field             */            $response = array("status" => '-2', "message" => $msg);            echo json_encode(array("response" => $response));            die;        } else {            /*             * check memberID in user_meta             * get first_name last_name dob of that member from wp_usermeta table             */            $first_name = "";             $last_name = "";            $dob = "";            $identity_id = "";            $connection = Yii::app()->db;             $member_id = $post['member_id'];            $wp_usermeta_table = "wp_usermeta";            $faceid_keylemon_models_table = "faceid_keylemon_models";            $wp_member_where = "meta_key ='member_id' AND meta_value = '".$member_id."'";            $member_userid = "select * from $wp_usermeta_table where $wp_member_where";                         $command_member = $connection->createCommand($member_userid);            $memberdata = $command_member->queryRow();            /*             * member data $memberdata             */            if(!empty($memberdata)){                $user_id = $memberdata['user_id'];//                print_r($user_id);die;                $command_user = $connection->createCommand("select * from $wp_usermeta_table where user_id = $user_id");                $usermetadatas = $command_user->queryAll();                 if(!empty($usermetadatas)){                     foreach ($usermetadatas as $usermetadata){                         /*                        * $usermetadata->meta_key == "first_name"                        * then set fristname                        */                                              if(isset($usermetadata['meta_key']) && $usermetadata['meta_key'] == "first_name"){                           $first_name = $usermetadata['meta_value'];                       }                       /*                        *  $usermetadata->meta_key == "last_name"                        * then set lastname                        */                       if(isset($usermetadata['meta_key']) && $usermetadata['meta_key'] == "last_name"){                           $last_name = $usermetadata['meta_value'];                       }                                               /*                        * $usermetadata->meta_key == "dob"                        * then set the dob                        */                       if(isset($usermetadata['meta_key']) && $usermetadata['meta_key'] == "dob"){//                           echo 'ok'; echo $usermetadata->mata_value;die;                           $dob = $usermetadata['meta_value'];                        }                       //                       $command_identity = $connection->createCommand("select * from $faceid_keylemon_models_table where user_id = $user_id");//                       $usermetadatas = $command_identity->queryAll();//                       print_r($command_identity);die;                                            }                                    }                 /*                 * select identity id from $faceid_keylemon_models_table                  */                $useridentity = "select * from $faceid_keylemon_models_table where user_id = $user_id";                $useridentitydata = Yii::app()->JsonWebservice->getRowData($useridentity);                if(!empty($useridentitydata)){                     if(!empty($useridentitydata)){                        $identity_id = $useridentitydata['identity_id'];                    }                                    }else{                    $response = array("status" => '-1', "message" => "Member ID is not exists.");                    echo json_encode(array("response" => $response));                    die;                  }                 $response = array("status" => '1',"first_name"=>$first_name,"last_name"=>$last_name,"dob"=>$dob,"identity_id"=>$identity_id, "message" => "Member ID details.");                echo json_encode(array("response" => $response));                die;                            }else{                $response = array("status" => '-1', "message" => "Member ID is not exists.");                echo json_encode(array("response" => $response));                die;            }                               }     }}?>